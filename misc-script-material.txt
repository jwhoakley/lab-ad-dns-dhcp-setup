#### TO ENABLE WINRM
# Set TrustedHosts on client host with Admin privs
set-item WSMan:\localhost\client\trustedhosts -Value *
get-item WSMan:\localhost\client\trustedhosts

# Set Target host to allow PSRemoting
Enable-PSRemoting -Force -SkipNetworkProfileCheck

# Allow WINRM through host firewall rule "WINRM-HTTP-In-TCP-PUBLIC" on Target host
# default is LocalSubnet for the RemoteAddress
Set-NetFirewallRule -Name WINRM-HTTP-In-TCP-PUBLIC -RemoteAddress Any

# Allow ICMP to Target host from anywhere
New-NetFirewallRule -DisplayName "Allow Any inbound ICMPv4" -Direction Inbound -Protocol ICMPv4 -IcmpType 8 -RemoteAddress Any -Action Allow

#------------------------------------------------------
$IPType = "IPv4"
$adapter = Get-NetAdapter | ? {$_.Status -eq "up"}
$interface = $adapter | Get-NetIPInterface -AddressFamily $IPType
If ($interface.Dhcp -eq "Enabled") {


New-NetFirewallRule -DisplayName "Allow inbound ICMPv4" -Direction Inbound -Protocol ICMPv4 -IcmpType 8 -RemoteAddress <localsubnet> -Action Allow
New-NetFirewallRule -DisplayName "Allow inbound ICMPv6" -Direction Inbound -Protocol ICMPv6 -IcmpType 8 -RemoteAddress 10.16.48.0/22 -Action Allow
Set-NetFirewallRule -Name WINRM-HTTP-In-TCP-PUBLIC -RemoteAddress Any
get-netfirewallrule -enabled true -direction inbound | more
#------------------------------------------------------

####### Networking

$IP = "10.10.10.10"
$MaskBits = 24 # This means subnet mask = 255.255.255.0
$Gateway = "10.10.10.1"
$Dns = "10.10.10.100"
$IPType = "IPv4"
# Retrieve the network adapter that you want to configure
$adapter = Get-NetAdapter | ? {$_.Status -eq "up"}
# Remove any existing IP, gateway from our ipv4 adapter
If (($adapter | Get-NetIPConfiguration).IPv4Address.IPAddress) {
 $adapter | Remove-NetIPAddress -AddressFamily $IPType -Confirm:$false
}
If (($adapter | Get-NetIPConfiguration).Ipv4DefaultGateway) {
 $adapter | Remove-NetRoute -AddressFamily $IPType -Confirm:$false
}
 # Configure the IP address and default gateway
$adapter | New-NetIPAddress `
 -AddressFamily $IPType `
 -IPAddress $IP `
 -PrefixLength $MaskBits `
 -DefaultGateway $Gateway
# Configure the DNS client server IP addresses
$adapter | Set-DnsClientServerAddress -ServerAddresses $DNS
 #------------------------------------------------------


$Features = @{}
$Features += @{ $RA = 'Not Installed' }
write-host -ForegroundColor Red ($Features | Format-Table | Out-String)


#Enter-PSSession -ComputerName $computername -Credential $credential
#Exit-PSSession


## find installed features
get-WindowsFeature | ?{$_.InstallState -match 'Installed'}

# Tests for open PSSession
# Invoke-Command -Session $rs -ScriptBlock { [System.Net.Dns]::GetHostName() }

# Read whether the desired roles/features are already enabled
#    import-module ServerManager
#    Install-WindowsFeature -Name <feature_name> -computerName <computer_name> -Restart
write-host "Opening session to remote host $computername"



# How to create secure string for confgi-conf.txt input file
#   $Secure = Read-Host -AsSecureString
#   $Encrypted = ConvertFrom-SecureString -SecureString $Secure -Key (1..16)
#   $Encrypted | Set-Content Encrypted.txt
#   $Secure2 = Get-Content Encrypted.txt | ConvertTo-SecureString -Key (1..16)




Credentials to file:

$credential = get-credential
$pwd = convertfrom-securestring $credential.password
$user = $credential.username
$string = "$user `n$pwd
$string | out-file ".\creds.txt"


Credentials from file:

$array = @(get-content .\creds.txt)
$username = $array[0]
$password = convertto-securestring $array[1]
$creds = new-object System.Management.Automation.Pscredential -argumentlist $username, $password


## Hyper-V relevant PS code

# set static ip for host
new-NetIPAddress xxxx

# https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network
# https://petri.com/using-nat-virtual-switch-hyper-v
# configure Windows 10 Hyper-V virtual switch for inbound NAT
New-VMSwitch -SwitchName "NATswitch" -SwitchType Internal
New-NetIPAddress -IPAddress 192.168.0.1 -PrefixLength 24 -InterfaceAlias “vEthernet (NATswitch)”
New-NetNAT -Name “NATnetwork” -InternalIPInterfaceAddressPrefix 192.168.0.0/24

# https://petri.com/configuring-vm-networking-hyper-v-nat-switch
# Push IPv4 config to VM from Hyper-V host
Get-VMNetworkAdapter -VMName WS2019-core-1 -Name "Network Adapter" | Set-VMNetworkConfiguration -IPAddress 192.168.0.10 -Subnet 255.255.255.0 -DNSServer 192.168.1.250 -DefaultGateway 192.168.0.1

# https://petri.com/create-nat-rules-hyper-v-nat-virtual-switch 
Add-NetNatStaticMapping -ExternalIPAddress "0.0.0.0/24" -ExternalPort 80 -Protocol TCP -InternalIPAddress "192.168.0.?" -InternalPort 80 -NatName NATnetwork
# optional....
Add-NetNatStaticMapping -ExternalIPAddress "0.0.0.0/24" -ExternalPort 50002 -Protocol TCP -InternalIPAddress "192.168.0.2" -InternalPort 3389 -NatName NATNetwork
Add-NetNatStaticMapping -ExternalIPAddress "0.0.0.0/24" -ExternalPort 50003 -Protocol TCP -InternalIPAddress "192.168.0.3" -InternalPort 3389 -NatName NATNetwork
Add-NetNatStaticMapping -ExternalIPAddress "0.0.0.0/24" -ExternalPort 50004 -Protocol TCP -InternalIPAddress "192.168.0.4" -InternalPort 3389 -NatName NATNetwork
